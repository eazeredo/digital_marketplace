apiVersion:  deploy.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}
    app-group: {{ .Values.app_group }}
    template: {{ .Values.name }}-deploy
  name: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    app: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}
    deploymentconfig: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}
  strategy:
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}
        app-group: {{ .Values.app_group }}
        deploymentconfig: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}
        template: {{ .Values.name }}-deploy
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}-secret
        - secretRef:
            name: {{ .Values.database_service_name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}-secret
        - configMapRef:
            name: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}-config
        image: image-registry.openshift-image-registry.svc:5000/{{ .Values.image_namespace }}/{{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: 3000
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        name: {{ .Values.name }}-{{ .Values.app_group }}-{{ .Values.tag_name }}
        ports:
        - containerPort: 3000
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: 3000
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: {{ .Values.cpu_limit }}
            memory: {{ .Values.memory_limit }}
          requests:
            cpu: {{ .Values.cpu_request }}
            memory: {{ .Values.memory_request }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
